generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  fid        Int?     @unique // Farcaster ID - now optional for wallet-only users
  username   String?  @unique // Username - now optional for wallet-only users
  walletAddress String? // Wallet address for wallet-only users (uniqueness handled in app code)
  pfpUrl     String?
  tips       Tip[]
  bookmarks  String[] // Array of Novel IDs (as strings)
  novels     String[] // Array of Novel IDs (as strings, for authored novels)
  supporters Supporter[]
  readingProgress ReadingProgress[] // User's reading progress across chapters
  createdAt  DateTime  @map("createdAt") @default(now())
  updatedAt  DateTime? @map("updatedAt")
  spendLimit Float    @default(100)
  chapterTipAmount Float @default(0.01) // Amount in USDC to tip per chapter
  spendPermission Json?
  spendPermissionSignature String?
  hasAddedMiniapp Boolean @default(false) // Track whether user has added the miniapp
}

model Tip {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  novel     Novel?   @relation(fields: [novelId], references: [id])
  novelId   String?
  chapter   Chapter? @relation(fields: [chapterId], references: [id])
  chapterId String?  @db.ObjectId
  amount    Float
  date      DateTime @default(now())
}

model Supporter {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  novel      Novel?   @relation(fields: [novelId], references: [id])
  novelId    String?
  totalTipped Float
}

model Novel {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String    @unique
  novelUrl      String? 
  author        String?
  rank          String?
  totalChapters String?
  views         String?
  bookmarks     String?
  status        String?
  genres        String[]
  summary       String?
  chaptersUrl   String?
  imageUrl      String?
  rating        Float     @default(0.0) // Average rating of the novel
  chapters      Chapter[] @relation("NovelChapters")
  lastScraped   DateTime? @default(now())
  createdAt     DateTime? @map("createdAt")
  updatedAt     DateTime? @map("updatedAt")
  tips          Tip[]
  supporters    Supporter[]

  @@map("novels")
}

model Chapter {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  novel         String?  @db.ObjectId // Reference to Novel
  novelRel      Novel?   @relation("NovelChapters", fields: [novel], references: [id])
  chapterNumber Int
  url           String   @unique
  title         String
  content       String
  tipCount      Int      @default(0)
  tips          Tip[]    // Tips made on this chapter
  readingProgress ReadingProgress[] // Reading progress for this chapter
  createdAt     DateTime? @map("createdAt")
  updatedAt     DateTime? @map("updatedAt")

  @@index([novel, chapterNumber], name: "novel_chapterNumber_idx")
  @@map("chapters")
}

model ReadingProgress {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.ObjectId
  chapter           Chapter  @relation(fields: [chapterId], references: [id])
  chapterId         String   @db.ObjectId
  currentLine       Int      @default(0) // Current line number (0-based)
  totalLines        Int      @default(0) // Total lines in the chapter
  progressPercentage Float   @default(0.0) // Percentage complete (0-100)
  scrollPosition    Int      @default(0) // Scroll position in pixels for fallback
  lastReadAt        DateTime @default(now()) // When user last read this chapter
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([userId, chapterId], name: "user_chapter_progress")
  @@index([userId], name: "user_progress_idx")
  @@index([chapterId], name: "chapter_progress_idx")
  @@index([lastReadAt], name: "last_read_idx")
  @@map("reading_progress")
}

model PreSave {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String?  // Optional email for notification
  userId    String?  // Optional reference to User (if logged in)
  createdAt DateTime @default(now())
}
